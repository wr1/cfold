{
  "files": [
    {
      "path": "src/cfold/cli/main.py",
      "content": "\"\"\"Main CLI for cfold using treeparse.\"\"\"\n\nimport treeparse\nfrom typing import List, Optional\n\nfrom .fold import fold\nfrom .unfold import unfold\nfrom .rc import rc\nfrom .view import view\nfrom .add import add\n\napp = treeparse.cli(\n    name=\"cfold\",\n    help=\"Fold code or docs tree into a single file with prompting for LLM interaction.\",\n    max_width=120,\n    show_types=True,\n    show_defaults=True,\n    line_connect=True,\n)\n\nfold_cmd = treeparse.command(\n    name=\"fold\",\n    help=\"Fold files or directory into a single file and visualize the structure.\",\n    callback=fold,\n    arguments=[\n        treeparse.argument(\n            name=\"files\", arg_type=str, nargs=\"*\", default=[], sort_key=0\n        ),\n    ],\n    options=[\n        treeparse.option(\n            flags=[\"--output\", \"-o\"],\n            help=\"Output file\",\n            arg_type=str,\n            default=\"codefold.json\",\n            sort_key=0,\n        ),\n        treeparse.option(\n            flags=[\"--prompt\", \"-p\"],\n            help=\"Prompt file to append\",\n            arg_type=str,\n            default=None,\n            sort_key=1,\n        ),\n        treeparse.option(\n            flags=[\"--dialect\", \"-d\"],\n            help=\"Instruction dialect (available: default, py, pytest, doc, typst)\",\n            arg_type=str,\n            default=\"default\",\n            sort_key=2,\n        ),\n        treeparse.option(\n            flags=[\"--bare\", \"-b\"],\n            help=\"Bare mode without boilerplate instructions\",\n            default=False,\n            arg_type=bool,\n            sort_key=3,\n        ),\n    ],\n)\napp.commands.append(fold_cmd)\n\nunfold_cmd = treeparse.command(\n    name=\"unfold\",\n    help=\"Unfold a modified fold file into a directory.\",\n    callback=unfold,\n    arguments=[\n        treeparse.argument(name=\"foldfile\", arg_type=str, sort_key=0),\n    ],\n    options=[\n        treeparse.option(\n            flags=[\"--original-dir\", \"-i\"],\n            help=\"Original project directory\",\n            arg_type=str,\n            default=None,\n            sort_key=0,\n        ),\n        treeparse.option(\n            flags=[\"--output-dir\", \"-o\"],\n            help=\"Output directory\",\n            arg_type=str,\n            default=None,\n            sort_key=1,\n        ),\n    ],\n)\napp.commands.append(unfold_cmd)\n\nrc_cmd = treeparse.command(\n    name=\"rc\",\n    help=\"Create or update .foldrc with a 'local' profile and set it as the default dialect.\",\n    callback=rc,\n)\napp.commands.append(rc_cmd)\n\nview_cmd = treeparse.command(\n    name=\"view\",\n    help=\"View the prompts and files in a fold file.\",\n    callback=view,\n    arguments=[\n        treeparse.argument(name=\"foldfile\", arg_type=str, default=\"codefold.json\", sort_key=0),\n    ],\n)\napp.commands.append(view_cmd)\n\nadd_cmd = treeparse.command(\n    name=\"add\",\n    help=\"Add files to an existing cfold file.\",\n    callback=add,\n    arguments=[\n        treeparse.argument(\n            name=\"files\", arg_type=str, nargs=\"*\", default=[], sort_key=0\n        ),\n    ],\n    options=[\n        treeparse.option(\n            flags=[\"--foldfile\", \"-f\"],\n            help=\"Cfold file to add to\",\n            arg_type=str,\n            default=\"codefold.json\",\n            sort_key=0,\n        ),\n    ],\n)\napp.commands.append(add_cmd)\n\n\ndef main():\n    app.run()\n\n\nif __name__ == \"__main__\":\n    main()\n",
      "delete": false
    }
  ]
}