{
  "files": [
    {
      "path": "src/cfold/cli/fold.py",
      "content": "\"\"\"Handle folding command for cfold.\"\"\"\n\nimport os\nimport json\nfrom pathlib import Path\nimport pyperclip  # Added for clipboard functionality\nfrom cfold.utils.instructions import load_instructions, get_available_dialects\nimport yaml  # Added for loading .foldrc\nfrom cfold.utils.foldignore import should_include_file\nfrom rich.console import Console\nfrom rich.tree import Tree\nfrom cfold.utils.treeviz import get_folded_tree\nfrom cfold.models import Codebase, FileEntry, Instruction  # Added for Pydantic model\nimport sys\nfrom typing import List, Optional\n\n\ndef fold(\n    files: List[str],\n    output: str = \"codefold.json\",\n    prompt: str = None,\n    dialect: str = \"default\",\n    bare: bool = False,\n):\n    \"\"\"Fold files or directory into a single text file and visualize the structure.\"\"\"\n    bare = bool(bare)\n    console = Console()\n    cwd = Path.cwd()\n    # Check for local default dialect if 'default' is specified\n    if dialect == \"default\":\n        local_path = cwd / \".foldrc\"\n        if local_path.exists():\n            with local_path.open(\"r\", encoding=\"utf-8\") as f:\n                local_config = yaml.safe_load(f) or {}\n            if \"default_dialect\" in local_config:\n                dialect = local_config[\"default_dialect\"]\n\n    try:\n        instructions, patterns = load_instructions(dialect)\n        if bare:\n            instructions = []\n    except ValueError:\n        available = get_available_dialects()\n        console.print(\n            f\"Invalid dialect specified. Available dialects: {', '.join(available)}\",\n            style=\"red\",\n        )\n        sys.exit(1)\n    except Exception as e:\n        console.print(f\"Error loading instructions: {str(e)}\", style=\"red\")\n        sys.exit(1)\n\n    included_patterns = patterns.get(\"included\", [])  # Adjust if needed\n    excluded_patterns = patterns.get(\"excluded\", [])\n    included_dirs = patterns.get(\"included_dirs\", [])\n    exclude_files = patterns.get(\"exclude_files\", [])\n\n    if not files:\n        directory = cwd\n        files = []\n        for dirpath, _, filenames in os.walk(directory):\n            for filename in filenames:\n                filepath = Path(dirpath) / filename\n                rel_path = os.path.relpath(str(filepath), str(directory))\n                if (\n                    should_include_file(\n                        filepath,\n                        directory,\n                        included_patterns,\n                        excluded_patterns,\n                        included_dirs,\n                    )\n                    and rel_path not in exclude_files\n                ):\n                    files.append(filepath)\n    else:\n        files = [Path(f).absolute() for f in files if Path(f).is_file()]\n        files = [\n            f for f in files if os.path.relpath(str(f), str(cwd)) not in exclude_files\n        ]\n\n    if not files:\n        console.print(\"No valid files to fold.\")\n        return\n\n    data = Codebase(\n        instructions=instructions,\n        files=[\n            FileEntry(\n                path=os.path.relpath(str(filepath), str(cwd)),\n                content=open(filepath, \"r\", encoding=\"utf-8\").read(),\n            )\n            for filepath in files\n        ],\n    )\n\n    prompt_content = \"\"\n    if prompt and os.path.isfile(prompt):\n        with open(prompt, \"r\", encoding=\"utf-8\") as prompt_infile:\n            prompt_content = prompt_infile.read()\n    elif prompt:\n        console.print(\n            f\"Warning: Prompt file '{prompt}' does not exist. Skipping.\", style=\"yellow\"\n        )\n\n    if prompt_content:\n        data.instructions.append(\n            Instruction(type=\"user\", content=prompt_content, name=\"prompt\")\n        )\n\n    try:\n        with open(output, \"w\", encoding=\"utf-8\") as outfile:\n            json.dump(\n                data.model_dump(),\n                outfile,\n                indent=2,\n            )\n        # Copy content to clipboard after writing the file\n        pyperclip.copy(json.dumps(data.model_dump()))\n    except IOError as e:\n        console.print(f\"Error writing to {output}: {e}\", style=\"red\")\n        sys.exit(1)\n\n    file_tree = get_folded_tree(files, cwd)\n    if file_tree:\n        console.print(file_tree)\n\n    # Visualize instructions by type and name\n    instr_tree = Tree(\"Instructions Added\", guide_style=\"dim\")\n    for instr in data.instructions:\n        label = f\"[bold]{instr.type}[/bold]\"\n        if instr.name:\n            label += f\" ({instr.name})\"\n        if instr.synopsis:\n            label += f\" - {instr.synopsis}\"\n        instr_tree.add(label)\n    console.print(instr_tree)\n\n    console.print(\n        f\"Codebase folded into [cyan]{output}[/cyan] and content [green]copied to clipboard[/green].\"\n    )\n",
      "delete": false
    },
    {
      "path": "tests/test_cfold.py",
      "content": "import pytest\nimport json\nimport sys\nimport yaml\nfrom pathlib import Path\n\nsys.path.append(str(Path(__file__).parent.parent / \"src\"))\nsys.path.append(str(Path(__file__).parent.parent.parent / \"treeparse\" / \"src\"))\n\nfrom cfold.cli.main import main  # Updated import\n\n\n@pytest.fixture\ndef temp_project(tmp_path):\n    \"\"\"Create a temporary project directory with sample files.\"\"\"\n    proj_dir = tmp_path\n    src_dir = proj_dir / \"src\" / \"project\"\n    src_dir.mkdir(parents=True)\n    (src_dir / \"main.py\").write_text('print(\"Hello\")\\n')\n    (src_dir / \"utils.py\").write_text(\"def util():\\n    pass\\n\")\n    (src_dir / \"importer.py\").write_text(\"from project.main import *\\n\")\n    (proj_dir / \"docs\").mkdir(exist_ok=True)\n    (proj_dir / \"docs\" / \"index.md\").write_text(\"# Docs\\n\")\n    return proj_dir\n\n\ndef test_fold(temp_project, tmp_path, monkeypatch, capsys):\n    \"\"\"Test fold command creates correct output.\"\"\"\n    files = [\n        str(temp_project / \"src\" / \"project\" / \"main.py\"),\n        str(temp_project / \"docs\" / \"index.md\"),\n    ]\n    output_file = tmp_path / \"folded.json\"\n    monkeypatch.chdir(tmp_path)\n    monkeypatch.setattr(\n        sys,\n        \"argv\",\n        [\"cfold\", \"fold\"] + files + [\"-o\", str(output_file), \"-d\", \"default\"],\n    )\n    main()\n    captured = capsys.readouterr()\n    assert \"Codebase folded into\" in captured.out\n    assert output_file.exists()\n    with open(output_file, \"r\", encoding=\"utf-8\") as f:\n        data = json.load(f)\n    assert \"instructions\" in data\n    assert len(data[\"files\"]) == 2\n    assert data[\"files\"][0][\"path\"] == \"src/project/main.py\"\n    assert data[\"files\"][0][\"content\"] == 'print(\"Hello\")\\n'\n    assert data[\"files\"][1][\"path\"] == \"docs/index.md\"\n    assert data[\"files\"][1][\"content\"] == \"# Docs\\n\"\n\n\ndef test_fold_directory_default(temp_project, tmp_path, monkeypatch, capsys):\n    \"\"\"Test folding directory when no files specified.\"\"\"\n    output_file = tmp_path / \"folded.json\"\n    monkeypatch.chdir(temp_project)\n    monkeypatch.setattr(\n        sys, \"argv\", [\"cfold\", \"fold\", \"-o\", str(output_file), \"-d\", \"default\"]\n    )\n    main()\n    captured = capsys.readouterr()\n    assert \"Codebase folded into\" in captured.out\n    assert output_file.exists()\n    with open(output_file, \"r\", encoding=\"utf-8\") as f:\n        data = json.load(f)\n    assert any(f[\"path\"] == \"src/project/main.py\" for f in data[\"files\"])\n    assert any(f[\"path\"] == \"docs/index.md\" for f in data[\"files\"])\n    assert any(f[\"path\"] == \"src/project/utils.py\" for f in data[\"files\"])\n\n\ndef test_fold_dialect_codeonly(temp_project, tmp_path, monkeypatch, capsys):\n    \"\"\"Test codeonly dialect excludes non-code files.\"\"\"\n    output_file = tmp_path / \"folded.json\"\n    monkeypatch.chdir(temp_project)\n    monkeypatch.setattr(\n        sys, \"argv\", [\"cfold\", \"fold\", \"-o\", str(output_file), \"-d\", \"py\"]\n    )\n    main()\n    captured = capsys.readouterr()\n    assert \"Codebase folded into\" in captured.out\n    assert output_file.exists()\n    with open(output_file, \"r\", encoding=\"utf-8\") as f:\n        data = json.load(f)\n    assert any(f[\"path\"] == \"src/project/main.py\" for f in data[\"files\"])\n    assert any(f[\"path\"] == \"src/project/utils.py\" for f in data[\"files\"])\n    assert any(f[\"path\"] == \"src/project/importer.py\" for f in data[\"files\"])\n    assert not any(f[\"path\"] == \"docs/index.md\" for f in data[\"files\"])\n\n\ndef test_fold_dialect_doconly(temp_project, tmp_path, monkeypatch, capsys):\n    \"\"\"Test doconly dialect includes only doc files.\"\"\"\n    output_file = tmp_path / \"folded.json\"\n    monkeypatch.chdir(temp_project)\n    monkeypatch.setattr(\n        sys, \"argv\", [\"cfold\", \"fold\", \"-o\", str(output_file), \"-d\", \"doc\"]\n    )\n    main()\n    captured = capsys.readouterr()\n    assert \"Codebase folded into\" in captured.out\n    assert output_file.exists()\n    with open(output_file, \"r\", encoding=\"utf-8\") as f:\n        data = json.load(f)\n    assert any(f[\"path\"] == \"docs/index.md\" for f in data[\"files\"])\n    assert not any(f[\"path\"] == \"src/project/utils.py\" for f in data[\"files\"])\n    assert not any(f[\"path\"] == \"src/project/importer.py\" for f in data[\"files\"])\n\n\ndef test_unfold_new_files(temp_project, tmp_path, monkeypatch, capsys):\n    \"\"\"Test unfolding new files.\"\"\"\n    fold_file = tmp_path / \"folded.json\"\n    data = {\n        \"instructions\": [],\n        \"files\": [\n            {\"path\": \"src/project/new.py\", \"content\": \"print('New file')\\n\"},\n            {\"path\": \"docs/new.md\", \"content\": \"# New Doc\\n\"},\n        ],\n    }\n    with open(fold_file, \"w\", encoding=\"utf-8\") as f:\n        json.dump(data, f)\n    output_dir = tmp_path / \"unfolded\"\n    output_dir.mkdir()\n    monkeypatch.chdir(tmp_path)\n    monkeypatch.setattr(\n        sys, \"argv\", [\"cfold\", \"unfold\", str(fold_file), \"-o\", str(output_dir)]\n    )\n    main()\n    captured = capsys.readouterr()\n    assert \"Codebase unfolded into\" in captured.out\n    assert (output_dir / \"src\" / \"project\" / \"new.py\").exists()\n    assert (\n        output_dir / \"src\" / \"project\" / \"new.py\"\n    ).read_text() == \"print('New file')\\n\"\n    assert (output_dir / \"docs\" / \"new.md\").exists()\n    assert (output_dir / \"docs\" / \"new.md\").read_text() == \"# New Doc\\n\"\n\n\ndef test_unfold_modify_and_delete(temp_project, tmp_path, monkeypatch, capsys):\n    \"\"\"Test unfolding with modifications and deletions.\"\"\"\n    fold_file = tmp_path / \"folded.json\"\n    data = {\n        \"instructions\": [],\n        \"files\": [\n            {\"path\": \"src/project/main.py\", \"content\": \"print('Modified')\\n\"},\n            {\"path\": \"src/project/utils.py\", \"delete\": True, \"content\": None},\n        ],\n    }\n    with open(fold_file, \"w\", encoding=\"utf-8\") as f:\n        json.dump(data, f)\n    output_dir = tmp_path / \"unfolded\"\n    output_dir.mkdir()\n    monkeypatch.chdir(tmp_path)\n    monkeypatch.setattr(\n        sys,\n        \"argv\",\n        [\n            \"cfold\",\n            \"unfold\",\n            str(fold_file),\n            \"-i\",\n            str(temp_project),\n            \"-o\",\n            str(output_dir),\n        ],\n    )\n    main()\n    captured = capsys.readouterr()\n    assert \"Codebase unfolded into\" in captured.out\n    assert (output_dir / \"src\" / \"project\" / \"main.py\").exists()\n    assert (\n        output_dir / \"src\" / \"project\" / \"main.py\"\n    ).read_text() == \"print('Modified')\\n\"\n    assert not (output_dir / \"src\" / \"project\" / \"utils.py\").exists()\n    assert (output_dir / \"docs\" / \"index.md\").exists()\n\n\ndef test_unfold_relocate_and_update_references(\n    temp_project, tmp_path, monkeypatch, capsys\n):\n    \"\"\"Test unfolding with file relocation.\"\"\"\n    fold_file = tmp_path / \"folded.json\"\n    data = {\n        \"instructions\": [],\n        \"files\": [\n            {\"path\": \"src/project/main.py\", \"delete\": True, \"content\": None},\n            {\"path\": \"src/project/core/main.py\", \"content\": 'print(\"Hello\")\\n'},\n            {\n                \"path\": \"src/project/importer.py\",\n                \"content\": \"from project.core.main import *\\n\",\n            },\n        ],\n    }\n    with open(fold_file, \"w\", encoding=\"utf-8\") as f:\n        json.dump(data, f)\n    output_dir = tmp_path / \"unfolded\"\n    output_dir.mkdir()\n    monkeypatch.chdir(tmp_path)\n    monkeypatch.setattr(\n        sys,\n        \"argv\",\n        [\n            \"cfold\",\n            \"unfold\",\n            str(fold_file),\n            \"-i\",\n            str(temp_project),\n            \"-o\",\n            str(output_dir),\n        ],\n    )\n    main()\n    captured = capsys.readouterr()\n    assert \"Codebase unfolded into\" in captured.out\n    assert (output_dir / \"src\" / \"project\" / \"core\" / \"main.py\").exists()\n    assert (\n        output_dir / \"src\" / \"project\" / \"core\" / \"main.py\"\n    ).read_text() == 'print(\"Hello\")\\n'\n    assert not (output_dir / \"src\" / \"project\" / \"main.py\").exists()\n    assert (\n        output_dir / \"src\" / \"project\" / \"importer.py\"\n    ).read_text() == \"from project.core.main import *\\n\"\n\n\ndef test_unfold_complex_full_content(temp_project, tmp_path, monkeypatch, capsys):\n    \"\"\"Test unfolding complex full-content file.\"\"\"\n    fold_file = tmp_path / \"complex_full.json\"\n    data = {\n        \"instructions\": [],\n        \"files\": [\n            {\n                \"path\": \"src/project/main.py\",\n                \"content\": 'print(\"Modified Hello\")\\nprint(\"Extra line\")\\n',\n            },\n            {\"path\": \"src/project/utils.py\", \"delete\": True, \"content\": None},\n            {\n                \"path\": \"src/project/core/utils.py\",\n                \"content\": \"def new_util():\\n    return 42\\n\",\n            },\n            {\n                \"path\": \"src/project/importer.py\",\n                \"content\": \"from project.main import *\\nprint('Imported')\\n\",\n            },\n            {\"path\": \"docs/index.md\", \"delete\": True, \"content\": None},\n            {\"path\": \"src/project/new_file.py\", \"content\": \"print('Brand new file')\\n\"},\n        ],\n    }\n    with open(fold_file, \"w\", encoding=\"utf-8\") as f:\n        json.dump(data, f)\n    output_dir = tmp_path / \"unfolded\"\n    output_dir.mkdir()\n    monkeypatch.chdir(tmp_path)\n    monkeypatch.setattr(\n        sys,\n        \"argv\",\n        [\n            \"cfold\",\n            \"unfold\",\n            str(fold_file),\n            \"-i\",\n            str(temp_project),\n            \"-o\",\n            str(output_dir),\n        ],\n    )\n    main()\n    captured = capsys.readouterr()\n    assert \"Codebase unfolded into\" in captured.out\n    assert (\n        output_dir / \"src\" / \"project\" / \"main.py\"\n    ).read_text() == 'print(\"Modified Hello\")\\nprint(\"Extra line\")\\n'\n    assert (\n        output_dir / \"src\" / \"project\" / \"core\" / \"utils.py\"\n    ).read_text() == \"def new_util():\\n    return 42\\n\"\n    assert not (output_dir / \"src\" / \"project\" / \"utils.py\").exists()\n    assert (\n        output_dir / \"src\" / \"project\" / \"importer.py\"\n    ).read_text() == \"from project.main import *\\nprint('Imported')\\n\"\n    assert not (output_dir / \"docs\" / \"index.md\").exists()\n    assert (\n        output_dir / \"src\" / \"project\" / \"new_file.py\"\n    ).read_text() == \"print('Brand new file')\\n\"\n\n\ndef test_unfold_md_commands_not_interpreted(\n    temp_project, tmp_path, monkeypatch, capsys\n):\n    \"\"\"Test MOVE/DELETE in .md files not interpreted.\"\"\"\n    fold_file = tmp_path / \"folded.json\"\n    data = {\n        \"instructions\": [],\n        \"files\": [\n            {\n                \"path\": \"docs/example.md\",\n                \"content\": \"# Example\\n\\nHere's how to delete a file:\\n# DELETE\\n# MOVE: src/project/main.py -> src/project/core/main.py\\n\",\n            }\n        ],\n    }\n    with open(fold_file, \"w\", encoding=\"utf-8\") as f:\n        json.dump(data, f)\n    output_dir = tmp_path / \"unfolded\"\n    output_dir.mkdir()\n    monkeypatch.chdir(tmp_path)\n    monkeypatch.setattr(\n        sys,\n        \"argv\",\n        [\n            \"cfold\",\n            \"unfold\",\n            str(fold_file),\n            \"-i\",\n            str(temp_project),\n            \"-o\",\n            str(output_dir),\n        ],\n    )\n    main()\n    captured = capsys.readouterr()\n    assert \"Codebase unfolded into\" in captured.out\n    example_content = (output_dir / \"docs\" / \"example.md\").read_text()\n    assert \"# Example\" in example_content\n    assert \"# DELETE\" in example_content\n    assert (\n        output_dir / \"src\" / \"project\" / \"utils.py\"\n    ).exists()  # Assuming it's copied\n\n\ndef test_fold_invalid_dialect(temp_project, tmp_path, monkeypatch, capsys):\n    \"\"\"Test fold with invalid dialect raises error.\"\"\"\n    output_file = tmp_path / \"folded.json\"\n    monkeypatch.chdir(temp_project)\n    monkeypatch.setattr(\n        sys, \"argv\", [\"cfold\", \"fold\", \"-o\", str(output_file), \"-d\", \"invalid\"]\n    )\n    with pytest.raises(SystemExit) as exc:\n        main()\n    assert exc.value.code == 1\n    captured = capsys.readouterr()\n    assert \"Invalid dialect specified\" in captured.out\n\n\ndef test_fold_no_files(temp_project, tmp_path, monkeypatch, capsys):\n    \"\"\"Test fold with no valid files.\"\"\"\n    output_file = tmp_path / \"folded.json\"\n    monkeypatch.chdir(\n        temp_project / \"docs\"\n    )  # Change to a dir with no includable files for py dialect\n    monkeypatch.setattr(\n        sys, \"argv\", [\"cfold\", \"fold\", \"-o\", str(output_file), \"-d\", \"py\"]\n    )\n    main()\n    captured = capsys.readouterr()\n    assert \"No valid files to fold.\" in captured.out\n    assert not output_file.exists()\n\n\ndef test_fold_with_prompt(temp_project, tmp_path, monkeypatch, capsys):\n    \"\"\"Test fold with prompt file.\"\"\"\n    output_file = tmp_path / \"folded.json\"\n    prompt_file = tmp_path / \"prompt.txt\"\n    prompt_file.write_text(\"Custom prompt content\")\n    monkeypatch.chdir(temp_project)\n    monkeypatch.setattr(\n        sys,\n        \"argv\",\n        [\n            \"cfold\",\n            \"fold\",\n            \"-o\",\n            str(output_file),\n            \"-p\",\n            str(prompt_file),\n            \"-d\",\n            \"default\",\n        ],\n    )\n    main()\n    captured = capsys.readouterr()\n    assert \"Codebase folded into\" in captured.out\n    with open(output_file, \"r\", encoding=\"utf-8\") as f:\n        data = json.load(f)\n    assert any(\n        i[\"content\"] == \"Custom prompt content\" and i[\"type\"] == \"user\"\n        for i in data[\"instructions\"]\n    )\n\n\ndef test_fold_with_invalid_prompt(temp_project, tmp_path, monkeypatch, capsys):\n    \"\"\"Test fold with non-existing prompt file.\"\"\"\n    output_file = tmp_path / \"folded.json\"\n    monkeypatch.chdir(temp_project)\n    monkeypatch.setattr(\n        sys,\n        \"argv\",\n        [\n            \"cfold\",\n            \"fold\",\n            \"-o\",\n            str(output_file),\n            \"-p\",\n            \"nonexistent.txt\",\n            \"-d\",\n            \"default\",\n        ],\n    )\n    main()\n    captured = capsys.readouterr()\n    assert (\n        \"Warning: Prompt file 'nonexistent.txt' does not exist. Skipping.\"\n        in captured.out\n    )\n    assert \"Codebase folded into\" in captured.out\n\n\ndef test_unfold_without_original_dir(temp_project, tmp_path, monkeypatch, capsys):\n    \"\"\"Test unfold without original directory.\"\"\"\n    fold_file = tmp_path / \"folded.json\"\n    data = {\n        \"instructions\": [],\n        \"files\": [\n            {\"path\": \"new_file.py\", \"content\": \"print('New')\\n\"},\n            {\"path\": \"to_delete.py\", \"delete\": True},\n        ],\n    }\n    with open(fold_file, \"w\", encoding=\"utf-8\") as f:\n        json.dump(data, f)\n    output_dir = tmp_path / \"unfolded\"\n    output_dir.mkdir()\n    monkeypatch.chdir(tmp_path)\n    monkeypatch.setattr(\n        sys, \"argv\", [\"cfold\", \"unfold\", str(fold_file), \"-o\", str(output_dir)]\n    )\n    main()\n    captured = capsys.readouterr()\n    assert \"Codebase unfolded into\" in captured.out\n    assert (output_dir / \"new_file.py\").exists()\n    assert not (output_dir / \"to_delete.py\").exists()\n\n\ndef test_unfold_merge_existing_dir(temp_project, tmp_path, monkeypatch, capsys):\n    \"\"\"Test unfold merging into existing directory.\"\"\"\n    fold_file = tmp_path / \"folded.json\"\n    data = {\n        \"instructions\": [],\n        \"files\": [\n            {\"path\": \"existing.py\", \"content\": \"print('Modified')\\n\"},\n        ],\n    }\n    with open(fold_file, \"w\", encoding=\"utf-8\") as f:\n        json.dump(data, f)\n    output_dir = tmp_path / \"unfolded\"\n    output_dir.mkdir()\n    (output_dir / \"existing.py\").write_text(\"original\")\n    (output_dir / \"unchanged.py\").write_text(\"unchanged\")\n    monkeypatch.chdir(tmp_path)\n    monkeypatch.setattr(\n        sys, \"argv\", [\"cfold\", \"unfold\", str(fold_file), \"-o\", str(output_dir)]\n    )\n    main()\n    captured = capsys.readouterr()\n    assert \"Codebase unfolded into\" in captured.out\n    assert (output_dir / \"existing.py\").read_text() == \"print('Modified')\\n\"\n    assert (output_dir / \"unchanged.py\").read_text() == \"unchanged\"\n\n\ndef test_unfold_delete_outside_cwd(temp_project, tmp_path, monkeypatch, capsys):\n    \"\"\"Test unfold does not delete files outside CWD.\"\"\"\n    fold_file = tmp_path / \"folded.json\"\n    data = {\n        \"instructions\": [],\n        \"files\": [\n            {\"path\": \"../outside.py\", \"delete\": True},\n        ],\n    }\n    with open(fold_file, \"w\", encoding=\"utf-8\") as f:\n        json.dump(data, f)\n    output_dir = tmp_path / \"unfolded\"\n    output_dir.mkdir()\n    outside_file = tmp_path / \"outside.py\"\n    outside_file.write_text(\"should not delete\")\n    monkeypatch.chdir(output_dir)\n    monkeypatch.setattr(sys, \"argv\", [\"cfold\", \"unfold\", str(fold_file), \"-o\", \".\"])\n    main()\n    captured = capsys.readouterr()\n    assert \"Codebase unfolded into\" in captured.out\n    assert outside_file.exists()  # Should not be deleted\n\n\ndef test_rc_command(temp_project, monkeypatch, capsys):\n    \"\"\"Test rc command creates .foldrc with local as default.\"\"\"\n    monkeypatch.chdir(temp_project)\n    monkeypatch.setattr(sys, \"argv\", [\"cfold\", \"rc\"])\n    main()\n    captured = capsys.readouterr()\n    assert \".foldrc created/updated\" in captured.out\n    foldrc_path = temp_project / \".foldrc\"\n    assert foldrc_path.exists()\n    with open(foldrc_path, \"r\", encoding=\"utf-8\") as f:\n        config = yaml.safe_load(f)\n    assert \"default_dialect\" in config and config[\"default_dialect\"] == \"local\"\n    assert \"local\" in config\n    assert config[\"local\"][\"pre\"] == [\"py\"]\n    assert config[\"local\"][\"instructions\"] == [\n        {\n            \"type\": \"user\",\n            \"synopsis\": \"local focus\",\n            \"content\": \"Focus on brief and modular code.\",\n        }\n    ]\n    assert config[\"local\"][\"included_suffix\"] == [\".py\", \".toml\"]\n\n\ndef test_fold_uses_local_default(temp_project, tmp_path, monkeypatch, capsys):\n    \"\"\"Test fold uses local default dialect from .foldrc.\"\"\"\n    foldrc_path = temp_project / \".foldrc\"\n    config = {\"default_dialect\": \"py\"}\n    with open(foldrc_path, \"w\", encoding=\"utf-8\") as f:\n        yaml.safe_dump(config, f)\n    output_file = tmp_path / \"folded.json\"\n    monkeypatch.chdir(temp_project)\n    monkeypatch.setattr(sys, \"argv\", [\"cfold\", \"fold\", \"-o\", str(output_file)])\n    main()\n    captured = capsys.readouterr()\n    assert \"Codebase folded into\" in captured.out\n    with open(output_file, \"r\", encoding=\"utf-8\") as f:\n        data = json.load(f)\n    # Check if it used 'py' dialect (excludes .md)\n    assert any(f[\"path\"] == \"src/project/main.py\" for f in data[\"files\"])\n    assert not any(f[\"path\"] == \"docs/index.md\" for f in data[\"files\"])\n\n\ndef test_fold_bare(temp_project, tmp_path, monkeypatch, capsys):\n    \"\"\"Test fold in bare mode has no instructions.\"\"\"\n    output_file = tmp_path / \"folded.json\"\n    monkeypatch.chdir(temp_project)\n    monkeypatch.setattr(\n        sys, \"argv\", [\"cfold\", \"fold\", \"-o\", str(output_file), \"-b\", \"True\", \"-d\", \"default\"]\n    )\n    main()\n    captured = capsys.readouterr()\n    assert \"Codebase folded into\" in captured.out\n    with open(output_file, \"r\", encoding=\"utf-8\") as f:\n        data = json.load(f)\n    assert data[\"instructions\"] == []\n    assert any(f[\"path\"] == \"src/project/main.py\" for f in data[\"files\"])\n    assert any(f[\"path\"] == \"docs/index.md\" for f in data[\"files\"])\n\n\ndef test_fold_bare_with_prompt(temp_project, tmp_path, monkeypatch, capsys):\n    \"\"\"Test fold in bare mode with prompt includes only the prompt.\"\"\"\n    output_file = tmp_path / \"folded.json\"\n    prompt_file = tmp_path / \"prompt.txt\"\n    prompt_file.write_text(\"Custom prompt\")\n    monkeypatch.chdir(temp_project)\n    monkeypatch.setattr(\n        sys,\n        \"argv\",\n        [\n            \"cfold\",\n            \"fold\",\n            \"-o\",\n            str(output_file),\n            \"-b\",\n            \"True\",\n            \"-p\",\n            str(prompt_file),\n            \"-d\",\n            \"default\",\n        ],\n    )\n    main()\n    captured = capsys.readouterr()\n    assert \"Codebase folded into\" in captured.out\n    with open(output_file, \"r\", encoding=\"utf-8\") as f:\n        data = json.load(f)\n    assert len(data[\"instructions\"]) == 1\n    assert data[\"instructions\"][0][\"content\"] == \"Custom prompt\"\n    assert data[\"instructions\"][0][\"type\"] == \"user\"\n    assert any(f[\"path\"] == \"src/project/main.py\" for f in data[\"files\"])\n    assert any(f[\"path\"] == \"docs/index.md\" for f in data[\"files\"])\n\n\ndef test_fold_with_exclude(temp_project, tmp_path, monkeypatch, capsys):\n    \"\"\"Test fold excludes files specified in dialect's exclude list.\"\"\"\n    foldrc_path = temp_project / \".foldrc\"\n    config = {\n        \"default_dialect\": \"local\",\n        \"local\": {\n            \"pre\": [\"default\"],\n            \"exclude\": [\"src/project/main.py\"],\n        },\n    }\n    with open(foldrc_path, \"w\", encoding=\"utf-8\") as f:\n        yaml.safe_dump(config, f)\n    output_file = tmp_path / \"folded.json\"\n    monkeypatch.chdir(temp_project)\n    monkeypatch.setattr(sys, \"argv\", [\"cfold\", \"fold\", \"-o\", str(output_file)])\n    main()\n    captured = capsys.readouterr()\n    assert \"Codebase folded into\" in captured.out\n    with open(output_file, \"r\", encoding=\"utf-8\") as f:\n        data = json.load(f)\n    assert not any(f[\"path\"] == \"src/project/main.py\" for f in data[\"files\"])\n    assert any(f[\"path\"] == \"src/project/utils.py\" for f in data[\"files\"])\n    assert any(f[\"path\"] == \"docs/index.md\" for f in data[\"files\"])\n\n\ndef test_view_command(tmp_path, monkeypatch, capsys):\n    \"\"\"Test view command displays instructions and files.\"\"\"\n    fold_file = tmp_path / \"view_test.json\"\n    data = {\n        \"instructions\": [\n            {\n                \"type\": \"system\",\n                \"content\": \"System prompt\",\n                \"name\": \"sys\",\n                \"synopsis\": \"Overview\",\n            },\n            {\"type\": \"user\", \"content\": \"User prompt\"},\n        ],\n        \"files\": [\n            {\"path\": \"file1.py\", \"content\": \"code\"},\n            {\"path\": \"file2.md\", \"delete\": True},\n        ],\n    }\n    with open(fold_file, \"w\", encoding=\"utf-8\") as f:\n        json.dump(data, f)\n\n    monkeypatch.chdir(tmp_path)\n    monkeypatch.setattr(sys, \"argv\", [\"cfold\", \"view\", str(fold_file)])\n    main()\n    captured = capsys.readouterr()\n    assert \"Instructions\" in captured.out\n    assert \"system (sys) - Overview\" in captured.out\n    assert \"user\" in captured.out\n    assert \"Files\" in captured.out\n    assert \"file1.py\" in captured.out\n    assert \"file2.md (delete)\" in captured.out\n\n\ndef test_view_invalid_file(tmp_path, monkeypatch, capsys):\n    \"\"\"Test view with invalid file shows error.\"\"\"\n    fold_file = tmp_path / \"invalid.json\"\n    fold_file.write_text(\"invalid json\")\n\n    monkeypatch.chdir(tmp_path)\n    monkeypatch.setattr(sys, \"argv\", [\"cfold\", \"view\", str(fold_file)])\n    main()\n    captured = capsys.readouterr()\n    assert \"Error loading\" in captured.out\n",
      "delete": false
    }
  ]
}