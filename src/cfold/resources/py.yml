
common:
  prefix: "# Instructions for LLM:\n
# This file uses the cfold format to manage a project codebase.\n
# - Folding: 'cfold fold <files> -o <output.txt>' captures specified files into this .txt.\n
# - Unfolding: 'cfold unfold <modified.txt>' applies changes from this .txt to the directory.\n
# Rules:\n
# - To modify a file: Keep its '# --- File: path ---' header and provide the full updated content below.\n
# - To delete a file: Replace its content with '# DELETE'.\n
# - To add a file: Add a new '# --- File: path ---' section with the full content.\n
# - To move/rename a file: Delete the old file with '# DELETE' under its original '# --- File: old_path ---' and add a new '# --- File: new_path ---' section with the full content.\n
# - Only include modified, new, or deleted files here; unchanged files are preserved from the original directory (if provided with -i).\n
# - For Markdown (e.g., .md files): Prefix every line with 'MD:' in full content mode; 'unfold' strips 'MD:' only from .md files.\n
# - Always preserve '# --- File: path ---' format for file sections.\n
# - Supports .foldignore file with gitignore-style patterns to exclude files during folding (directory mode).\n
# - Paths are relative to the current working directory (CWD) by default.\n
# - Prepend 'CFOLD: ' to every line in the output. \n
#   So for markdown a line starts 'CFOLD: MD: '  \n
#   For non-markdown just write 'CFOLD: '  \n
# Refactoring Guidelines:\n
# - Prefer organizing code into subdirectories based on functionality (e.g., 'src/<project>/utils/', 'src/<project>/core/', 'src/<project>/cli/').\n
# - Split functionality into small, focused files (e.g., one function or class per file where practical, typically 50-200 lines).\n
# - To refactor (e.g., move/rename):\n
# - Delete the original file with '# DELETE' under its '# --- File: old_path ---'.\n
# - Add the new file with '# --- File: new_path ---' and its full content.\n
# - Example: To split a large 'main.py' into smaller files:\n
# - '# --- File: main.py ---' with '# DELETE'.\n
# - '# --- File: src/core/main.py ---' with reduced content.\n
# - '# --- File: src/utils/helper.py ---' with extracted functions.\n
# - Aim for modularity: Each file should have a single responsibility, making it easier to modify or replace individually.\n
# - Reply using a single plain text code block for implementing changes to multiple files using 'cfold unfold <singlefile.txt>'.\n
# - Don't include LLM instructions in the output.\n
# - Use high level 1 line docstrings\n
# Return the cfold formatted output directly in the chat without opening Grok Studio or the canvas panel.\n\n
# Add one character alternatives to command line options i.e. --file and -f \n
# NOTE, there is no syntax to only include parts of files, so avoid '... rest of file remains unchanged ' type output
# Never delete files that are outside of cwd (i.e. starting with ../ or the like)"


default:
  prefix: "# For Python, prefer uv for installation, mkdocs for documentation, use vectorisation using numpy.   \n\n"
  included_suffix: [".py", ".toml", ".md", ".yml", ".yaml"]


codeonly:
  prefix: "# Prefer uv for installation, mkdocs for documentation, use vectorisation using numpy.  \n\n"
  included_suffix: [".py",".toml"]
  included_dirs: ["src"]

test:
  prefix: "# Rewrite tests/test_ansys.py to follow pytest best practices. Use session-scoped fixtures for setup and conversion, parametrize tests for load case files, and ensure each test is independent. Verify file existence, line counts, and specific ANSYS commands (e.g., '/solu', 'f,'). Include detailed assert messages, log actual vs. expected values, and skip tests if input files are missing. Follow PEP 8, use helper functions to avoid duplication, and ensure the conversion runs only once.\n\n"
  included_suffix: [".py",".log"]
  included_dirs: ["tests"]


doconly:
  prefix: "# Prefer uv for installation, mkdocs for documentation, use vectorisation using numpy.  \n\n"
  included_suffix: [".md", ".yml", ".yaml"]
  included_dirs: ["src", "docs"]

latex:
  prefix: "# for latex, use article class, tikz, biber/biblatex, hyperref. Use a main.tex and include the sections. Use the cenum environment for continuously increased numbering through the document.  \n\n"
  included_suffix: [".tex","makefile"]
