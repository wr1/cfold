common:
  instructions:
    - type: assistant
      synopsis: "define cfold output format"
      content: |-
        This JSON file represents a project codebase in cfold format, with prompts for LLM.
        The fields are 'instructions' (list of instruction objects), 'files'.
        Each instruction: {type: 'system'|'user'|'assistant', content: string, name: string (optional), synopsis: string (optional)}
        Each file in 'files': {path: string, content: Optional[string], delete: bool (default: false)}
        To update the codebase, modify the 'files' array as per the following rules. Do not modify 'instructions' unless explicitly specified.
        - Folding: 'cfold fold <files> -o <output.json>' captures specified files into this .json.
        - Unfolding: 'cfold unfold <modified.json>' applies changes from this .json to the directory.
        Rules:
        - To delete a file: Add an object to the 'files' array with 'path' and set 'delete': true (content can be null or omitted).
        - To add or modify a file: Add or update the object with 'path', full 'content', and 'delete': false (optional, default false).
        - To move/rename a file: Add a delete object for the old path ('delete': true) and a new object with the new 'path', full 'content', and 'delete': false.
        - Only include modified, new, or deleted files in the 'files' array; unchanged files are preserved from the original directory (if provided with -i).
        - Always provide full file content for additions and modifications; no partial updates.
        - Paths are relative to the current working directory (CWD) by default.
        - Supports .foldrc YAML file for custom dialects, patterns, and instructions, which can reference defaults via 'pre'.
        - Write output as a full dict {'files': [...] }, not the bare 'files' array.

default:
  pre: [common]

  instructions:
    - type: system
      synopsis: "role definition"
      content: "You are an expert engineer, always aiming for superior usability, code quality, and performance. Follow best practices for the specific programming language or framework. Use appropriate libraries and tools for installation, documentation, vectorisation, and validation. Ensure code is modular, maintainable. Always follow PEP 8 for Python code style."
    - type: user
      synopsis: "define refactoring guidelines"
      content: |-
        Refactoring Guidelines:
        - Prefer organizing code into subdirectories based on functionality (e.g., 'src/<project>/utils/', 'src/<project>/core/', 'src/<project>/cli/').
        - Split functionality into small, focused files (e.g., one function or class per file where practical, typically 50-200 lines).
        - Aim for modularity: Each file should have a single responsibility, making it easier to modify or replace individually.
        - Don't include LLM instructions in the output.
        - Use high level 1 line docstrings
        - Add one character alternatives to command line options i.e. --file and -f
        - Never delete files that are outside of cwd (i.e. starting with ../ or / or otherwise outside of the cwd)
        - Make the CLI callable in pyproject.toml 
    - type: user
      synopsis: "instructions for authoring admin.sh"
      content: |-
        add an admin.sh file in the root dir, where each file has a separate line for each file added, pipe output from ruff check and pytest to out.txt
        ruff format 
        ruff check --fix > out.txt 
        git commit <filename> -m 'summary of edits for <filename>'
        git commit <filename2> -m 'summary of edits for <filename2>'
        ... for all files (but not the admin.sh file itself), if the files are new, add git add <filename> before git commit
        uv run pytest -v >> out.txt 

  included_suffix:
    - ".py"
    - ".toml"
    - ".md"
    - ".yml"
    - ".yaml"
  included_dirs:
    - "src"
    - "tests"
    - "docs"
    - "examples"
    - "."

py:
  pre: [common, default]
  instructions:
    - type: user
      synopsis: "python instructions"
      content: "# Prefer uv for installation, mkdocs for documentation, use vectorisation using numpy, validation with pydantic. "
  included_suffix:
    - ".py"
    - ".toml"
    - ".ini"

  included_dirs:
    - "src"
    - "."

pytest:
  pre: [common, default]
  instructions:
    - type: user
      synopsis: "pytest instructions"
      content: "# Use session-scoped fixtures for setup and conversion, parametrize tests when needed, avoid overuse of fixtures, in particular outside of a given test file."
  included_suffix:
    - ".py"
    - ".log"
  included_dirs:
    - "tests"

doc:
  pre: [common]
  instructions:
    - type: user
      synopsis: "documentation instructions"
      content: "# use mkdocs for documentation, avoid overly long pages, try to split up into smaller sections in separate files. Use ubuntu sans and ubuntu mono fonts for text and code. Put particular care and attention to the front page, include a minimal and clear example of the main intented use of the project so that a user can get started without needing to read further. Avoid long-winded contribution guidelines. "
  included_suffix:
    - ".md"
    - ".yml"
    - ".yaml"
  included_dirs:
    - "src"
    - "docs"


typst:
  pre: [common]
  instructions:
    - type: system
      content: "# for typst, follow typst syntax. Structure the document with sections and subsections as needed. "
  included_suffix:
    - ".typ"


hugo:
  pre: [common]
  instructions:
    - type: user
      synopsis: "hugo instructions"
      content: "# For Hugo projects, focus on content/ directory for MD files, include hugo.yaml config. Use Hugo's front matter for metadata, organize content hierarchically."
  included_suffix:
    - ".md"
    - ".yaml"
  included_dirs:
    - "content"
    - "."


