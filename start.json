{
  "instructions": [
    {
      "type": "assistant",
      "content": "This JSON file represents a project codebase in cfold format, with prompts for LLM.\nThe fields are 'instructions' (list of instruction objects), 'files'.\nEach instruction: {type: 'system'|'user'|'assistant', content: string, name: string (optional)}\nEach file in 'files': {path: string, content: Optional[string], delete: bool (default: false)}\nTo update the codebase, modify the 'files' array as per the following rules. Do not modify 'instructions' unless explicitly specified.\n- Folding: 'cfold fold <files> -o <output.json>' captures specified files into this .json.\n- Unfolding: 'cfold unfold <modified.json>' applies changes from this .json to the directory.\nRules:\n- To delete a file: Add an object to the 'files' array with 'path' and set 'delete': true (content can be null or omitted).\n- To add or modify a file: Add or update the object with 'path', full 'content', and 'delete': false (optional, default false).\n- To move/rename a file: Add a delete object for the old path ('delete': true) and a new object with the new 'path', full 'content', and 'delete': false.\n- Only include modified, new, or deleted files in the 'files' array; unchanged files are preserved from the original directory (if provided with -i).\n- Always provide full file content for additions and modifications; no partial updates.\n- Supports .foldignore file with gitignore-style patterns to exclude files during folding (directory mode).\n- Paths are relative to the current working directory (CWD) by default.\n- Write output as a full dict {'files': [...] }, not the bare 'files' array.",
      "name": "common"
    },
    {
      "type": "system",
      "content": "You are an expert engineer, always aiming for superior usability, code quality, and performance. Follow best practices for the specific programming language or framework. Use appropriate libraries and tools for installation, documentation, vectorisation, and validation. Ensure code is modular, maintainable. Always follow PEP 8 for Python code style.",
      "name": "default"
    },
    {
      "type": "user",
      "content": "Refactoring Guidelines:\n- Prefer organizing code into subdirectories based on functionality (e.g., 'src/<project>/utils/', 'src/<project>/core/', 'src/<project>/cli/').\n- Split functionality into small, focused files (e.g., one function or class per file where practical, typically 50-200 lines).\n- Aim for modularity: Each file should have a single responsibility, making it easier to modify or replace individually.\n- Don't include LLM instructions in the output.\n- Use high level 1 line docstrings\n- Add one character alternatives to command line options i.e. --file and -f\n- Never delete files that are outside of cwd (i.e. starting with ../ or / or otherwise outside of the cwd)\n- Make the CLI callable in pyproject.toml ",
      "name": "default"
    },
    {
      "type": "user",
      "content": "add an admin.sh file in the root dir, where each file has a separate line for each file added\nruff format \nruff check --fix \ngit commit <filename> -m 'summary of edits for <filename>'\ngit commit <filename2> -m 'summary of edits for <filename2>'\n... for all files (but not the admin.sh file itself), if the files are new, add git add <filename> before git commit\nuv run pytest -v > err.txt ",
      "name": "default"
    },
    {
      "type": "user",
      "content": "write a 3d finite element solver using hex8 elements that uses numpy and pyvista for visualisation, use it to model a cube with 10x10x10 elements where x,y,z span range [0,1], clamp z==0 and apply unit force in z direction at z==1 ",
      "name": "custom"
    }
  ],
  "files": []
}